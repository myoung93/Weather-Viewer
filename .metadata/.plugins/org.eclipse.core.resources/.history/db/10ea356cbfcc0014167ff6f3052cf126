package group17.weatherviewer;

import javax.swing.*;
import javax.swing.event.*;

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

public class MainFrame {

	// this is incredibly messy, we'll have to clean this up later
	// a lot of these can be local fields too, but memory isn't really a big
	// deal
	private static Font font;
	private JFrame frame;
	private ImageIcon backgroundImage;
	private ImageIcon weatherIcon;
	private JLabel backgroundLabel;
	private JTextField textField;
	private JTextField barSearch;
	private JScrollPane scrollPane;
	private JButton buttonFavourite;
	private JButton buttonLongTerm;
	private JButton buttonShortTerm;
	private JButton buttonRefresh;
	private JButton buttonToCelsius;
	private JButton buttonToFahrenheit;
	private JLabel labelSkyConditionIcon;
	private JLabel labelAirPressure;
	private JLabel labelMaxTemp;
	private JLabel labelMinTemp;
	private JLabel labelSunrise;
	private JLabel labelSunset;
	private JLabel labelWind;
	private JLabel labelHumidity;
	private JLabel labelLocation;
	private JLabel labelTempInfo;
	private JLabel labelWindInfo;
	private JLabel labelHumidityInfo;
	private JLabel labelAirPressureInfo;
	private JLabel labelMaxTempInfo;
	private JLabel labelMinTempInfo;
	private JLabel labelSunriseInfo;
	private JLabel labelSunsetInfo;
	private JLabel labelSkyConditionInfo;
	private JLabel label12AM;
	private JLabel label3AM;
	private JLabel label6AM;
	private JLabel label9AM;
	private JLabel label12PM;
	private JLabel label3PM;
	private JLabel label6PM;
	private JLabel label9PM;
	private JLabel labelMon;
	private JLabel labelTues;
	private JLabel labelWed;
	private JLabel labelThurs;
	private JLabel labelFri;
	private JLabel labelSat;
	private JLabel labelSun;
	private JList listLocations;
	private JScrollBar scrollBarLocations;
	private DefaultListModel listModel;

	// prefs file
	// UserPreferences prefs;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainFrame window = new MainFrame();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MainFrame() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		/*
		 * try { prefs = UserPreferences.getPrefs(); } catch(IOException e) {
		 * System.out.println("Error retrieving prefs"); e.printStackTrace(); }
		 * catch(ClassNotFoundException e) {
		 * System.out.println("Error retrieving prefs"); e.printStackTrace(); }
		 * 
		 * CurrentWeather currentWeather = null; try {
		 * prefs.addLocation("Toronto, CA"); currentWeather = new
		 * CurrentWeather(prefs.getLocation(0)); }
		 * catch(UnsupportedEncodingException e) {
		 * System.out.println("Something went wrong retrieving current weather"
		 * ); e.printStackTrace(); } catch(WeatherException e) {
		 * System.out.println
		 * ("Something went wrong retrieving current weather");
		 * e.printStackTrace(); }
		 * 
		 * // attributes String temp, windSpeed, airPressure, humidity, minTemp,
		 * maxTemp, sunRise, sunSet, windDirection, skyCondition, location; //
		 * hard coded initializations // in the future none of these actually
		 * have to be stored, we can just // do weatherObject.getTemp() etc. -TE
		 * //still need to implement converter methods/class so that we don't
		 * have temperatures in kelvin. location = currentWeather.getCity();
		 * temp = currentWeather.getTemp(); windSpeed =
		 * currentWeather.getWindSpeed(); windDirection =
		 * currentWeather.getWindDirection(); humidity =
		 * currentWeather.getHumidity(); airPressure =
		 * currentWeather.getPressure(); maxTemp = currentWeather.getTempMax();
		 * minTemp = currentWeather.getTempMin(); //Sunrise and sunset need to
		 * be converted from Unix time, preferably in the CurrentWeather class
		 * itself. sunRise = currentWeather.getSunriseTime(); sunSet =
		 * currentWeather.getSunsetTime(); skyCondition =
		 * currentWeather.getSkyCondition();
		 * 
		 * // set up background -> this is returning the ugly grey background
		 * only it seems
		 * 
		 * if (skyCondition.equalsIgnoreCase("sky is clear")) { backgroundImage
		 * = new ImageIcon(
		 * "src/main/resources/backgrounds/sunny_background.jpg"); weatherIcon =
		 * new ImageIcon("src/main/resources/icons/sun_icon.png"); } else if
		 * (skyCondition.equalsIgnoreCase("Cloudy")) { backgroundImage = new
		 * ImageIcon( "src/main/resources/backgrounds/cloudy_background.jpg");
		 * weatherIcon = new
		 * ImageIcon("src/main/resources/icons/cloud_heavy_icon.png"); } else if
		 * (skyCondition.equalsIgnoreCase("Rainy")) { backgroundImage = new
		 * ImageIcon( "src/main/resources/backgrounds/rainy_background.jpg");
		 * weatherIcon = new
		 * ImageIcon("src/main/resources/icons/rain_heavy_icon.png"); }
		 */

		createFont();
		
		// / BEING INITIALIZING FRAME ///
		backgroundImage = new ImageIcon(
				"src/main/resources/backgrounds/default_background.jpg");
		backgroundLabel = new JLabel(backgroundImage);
		backgroundLabel.setSize(800, 520);
		frame = new JFrame();
		frame.setLocationRelativeTo(null);
		frame.setSize(800, 520);
		frame.setContentPane(backgroundLabel);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		// / END INITIALIZING FRAME ///

		// / BEGIN INITIALIZING LOCAL WEATHER VIEW PANEL ///

		// city label
		labelLocation = new JLabel("");
		labelLocation.setForeground(Color.WHITE);
		//labelLocation.setFont(new Font("Helvetica", Font.PLAIN, 17));
		labelLocation.setFont(font.deriveFont(17f));
		labelLocation.setBounds(50, 25, 200, 37);
		frame.getContentPane().add(labelLocation);

		// temperature label
		labelTempInfo = new JLabel("");
		//labelTempInfo.setFont(new Font("Helvetica", Font.PLAIN, 93));
		labelTempInfo.setFont(font.deriveFont(85f));
		labelTempInfo.setForeground(Color.WHITE);
		labelTempInfo.setBounds(50, 64, 318, 94);
		frame.getContentPane().add(labelTempInfo);

		// wind label
		labelWind = new JLabel("Wind:");
		labelWind.setForeground(Color.LIGHT_GRAY);
		//labelWind.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelWind.setFont(font.deriveFont(15f));
		labelWind.setBounds(50, 170, 61, 15);
		frame.getContentPane().add(labelWind);

		// humidity label
		labelHumidity = new JLabel("Humidity:");
		labelHumidity.setForeground(Color.LIGHT_GRAY);
		//labelHumidity.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelHumidity.setFont(font.deriveFont(15f));
		labelHumidity.setBounds(50, 190, 70, 15);
		frame.getContentPane().add(labelHumidity);

		// air pressure label
		labelAirPressure = new JLabel("Air Pressure:");
		labelAirPressure.setForeground(Color.LIGHT_GRAY);
		//labelAirPressure.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelAirPressure.setFont(font.deriveFont(15f));
		labelAirPressure.setBounds(50, 210, 96, 15);
		frame.getContentPane().add(labelAirPressure);

		// max temp label
		labelMaxTemp = new JLabel("Max Temp:");
		labelMaxTemp.setForeground(Color.LIGHT_GRAY);
		//labelMaxTemp.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelMaxTemp.setFont(font.deriveFont(15f));
		labelMaxTemp.setBounds(50, 230, 96, 15);
		frame.getContentPane().add(labelMaxTemp);

		// min temp label
		labelMinTemp = new JLabel("Min. Temp:");
		labelMinTemp.setForeground(Color.LIGHT_GRAY);
		//labelMinTemp.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelMinTemp.setFont(font.deriveFont(15f));
		labelMinTemp.setBounds(50, 250, 96, 15);
		frame.getContentPane().add(labelMinTemp);

		// sunrise label
		labelSunrise = new JLabel("Sunrise:");
		labelSunrise.setForeground(Color.LIGHT_GRAY);
		//labelSunrise.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSunrise.setFont(font.deriveFont(15f));
		labelSunrise.setBounds(50, 270, 61, 15);
		frame.getContentPane().add(labelSunrise);

		// sunset label
		labelSunset = new JLabel("Sunset:");
		labelSunset.setForeground(Color.LIGHT_GRAY);
		//labelSunset.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSunset.setFont(font.deriveFont(15f));
		labelSunset.setBounds(50, 290, 58, 15);
		frame.getContentPane().add(labelSunset);

		// wind info

		labelWindInfo = new JLabel("");
		labelWindInfo.setForeground(Color.WHITE);
		//labelWindInfo.setFont(new Font("SansSerif", Font.PLAIN, 15));
		labelWindInfo.setFont(font.deriveFont(15f));
		labelWindInfo.setBounds(103, 170, 200, 15);
		frame.getContentPane().add(labelWindInfo);

		// humidity info
		labelHumidityInfo = new JLabel("");
		labelHumidityInfo.setForeground(Color.WHITE);
		//labelHumidityInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelHumidityInfo.setFont(font.deriveFont(15f));
		labelHumidityInfo.setBounds(130, 190, 200, 15);
		frame.getContentPane().add(labelHumidityInfo);

		// air pressure info
		labelAirPressureInfo = new JLabel("");
		labelAirPressureInfo.setForeground(Color.WHITE);
		//labelAirPressureInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelAirPressureInfo.setFont(font.deriveFont(15f));
		labelAirPressureInfo.setBounds(158, 210, 200, 15);
		frame.getContentPane().add(labelAirPressureInfo);

		// max temp info
		labelMaxTempInfo = new JLabel("");
		labelMaxTempInfo.setForeground(Color.WHITE);
		//labelMaxTempInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelMaxTempInfo.setFont(font.deriveFont(15f));
		labelMaxTempInfo.setBounds(145, 230, 200, 15);
		frame.getContentPane().add(labelMaxTempInfo);

		// min temp info
		labelMinTempInfo = new JLabel("");
		labelMinTempInfo.setForeground(Color.WHITE);
		//labelMinTempInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelMinTempInfo.setFont(font.deriveFont(15f));
		labelMinTempInfo.setBounds(145, 250, 200, 15);
		frame.getContentPane().add(labelMinTempInfo);

		// sunrise info
		labelSunriseInfo = new JLabel("");
		labelSunriseInfo.setForeground(Color.WHITE);
		//labelSunriseInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSunriseInfo.setFont(font.deriveFont(15f));
		labelSunriseInfo.setBounds(130, 270, 200, 15);
		frame.getContentPane().add(labelSunriseInfo);

		// sunset info
		labelSunsetInfo = new JLabel("");
		labelSunsetInfo.setForeground(Color.WHITE);
		//labelSunsetInfo.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSunsetInfo.setFont(font.deriveFont(15f));
		labelSunsetInfo.setBounds(130, 291, 200, 15);
		frame.getContentPane().add(labelSunsetInfo);

		// sky condition info
		labelSkyConditionInfo = new JLabel("");
		labelSkyConditionInfo.setForeground(Color.WHITE);
		//labelSkyConditionInfo.setFont(new Font("Helvetica", Font.PLAIN, 17));
		labelSkyConditionInfo.setFont(font.deriveFont(17f));
		labelSkyConditionInfo.setBounds(381, 25, 200, 37);
		frame.getContentPane().add(labelSkyConditionInfo);

		// sky condition Icon info
		labelSkyConditionIcon = new JLabel();
		labelSkyConditionIcon.setBounds(355, 70, 204, 200);
		frame.getContentPane().add(labelSkyConditionIcon);

		// Refresh button
		buttonRefresh = new JButton("");
		buttonRefresh.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				refresh();
			}
		});
		buttonRefresh.setIcon(new ImageIcon(
				"src/main/resources/icons/refresh_icon.png"));
		buttonRefresh.setBounds(540, 16, 41, 37);
		buttonRefresh.setOpaque(false);
		buttonRefresh.setContentAreaFilled(false);
		buttonRefresh.setBorderPainted(false);
		frame.getContentPane().add(buttonRefresh);

		// Short Term Button
		buttonShortTerm = new JButton("Short Term");
		buttonShortTerm.setForeground(Color.WHITE);
		//buttonShortTerm.setFont(new Font("Helvetica", Font.PLAIN, 15));
		buttonShortTerm.setFont(font.deriveFont(15f));
		buttonShortTerm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				shortTermView();
			}
		});
		buttonShortTerm.setOpaque(false);
		buttonShortTerm.setContentAreaFilled(false);
		buttonShortTerm.setBorderPainted(false);
		buttonShortTerm.setBounds(19, 328, 120, 29);
		frame.getContentPane().add(buttonShortTerm);

		// Long Term Button
		buttonLongTerm = new JButton("Long Term");
		buttonLongTerm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				longTermView();
			}
		});

		buttonLongTerm.setOpaque(false);
		buttonLongTerm.setForeground(Color.DARK_GRAY);
		//buttonLongTerm.setFont(new Font("Helvetica", Font.PLAIN, 15));
		buttonLongTerm.setFont(font.deriveFont(15f));
		buttonLongTerm.setContentAreaFilled(false);
		buttonLongTerm.setBorderPainted(false);
		buttonLongTerm.setBounds(95, 328, 127, 29);
		frame.getContentPane().add(buttonLongTerm);

		// toCelsius button
		buttonToCelsius = new JButton("°C");
		buttonToCelsius.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				buttonToCelsius.setForeground(Color.WHITE);
				buttonToFahrenheit.setForeground(Color.DARK_GRAY);
			}
		});
		buttonToCelsius.setOpaque(false);
		buttonToCelsius.setForeground(Color.WHITE);
		//buttonToCelsius.setFont(new Font("Helvetica", Font.PLAIN, 18));
		buttonToCelsius.setFont(font.deriveFont(18f));
		buttonToCelsius.setContentAreaFilled(false);
		buttonToCelsius.setBorderPainted(false);
		buttonToCelsius.setBounds(475, 283, 75, 29);
		frame.getContentPane().add(buttonToCelsius);

		// toFarenheit button
		buttonToFahrenheit = new JButton("°F");
		buttonToFahrenheit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				buttonToFahrenheit.setForeground(Color.WHITE);
				buttonToCelsius.setForeground(Color.DARK_GRAY);
			}
		});
		buttonToFahrenheit.setOpaque(false);
		buttonToFahrenheit.setForeground(Color.DARK_GRAY);
		//buttonToFahrenheit.setFont(new Font("Helvetica", Font.PLAIN, 18));
		buttonToFahrenheit.setFont(font.deriveFont(18f));
		buttonToFahrenheit.setContentAreaFilled(false);
		buttonToFahrenheit.setBorderPainted(false);
		buttonToFahrenheit.setBounds(520, 283, 70, 29);
		frame.getContentPane().add(buttonToFahrenheit);

		// / END INITIALIZATION OF LOCAL WEATHER VIEW PANEL ///

		// / BEING INITIALIZATION OF LOCATIONS PANEL ///

		// Scroll Pane
		scrollPane = new JScrollPane();
		scrollPane
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setBounds(595, 56, 195, 422);
		scrollPane.setOpaque(false);
		scrollPane.getViewport().setOpaque(false);
		frame.getContentPane().add(scrollPane);

		// Locations list
		listModel = new DefaultListModel();
		listLocations = new JList(listModel);
		scrollPane.setViewportView(listLocations);

		// scroll bar for Locations list
		scrollBarLocations = new JScrollBar();
		scrollPane.setRowHeaderView(scrollBarLocations);

		// favorite Button
		buttonFavourite = new JButton();
		AddLocation addlocation = new AddLocation(buttonFavourite);
		buttonFavourite.addActionListener(addlocation);
		buttonFavourite.setEnabled(false);
		buttonFavourite.setIcon(new ImageIcon(
				"src/main/resources/icons/star_icon.png"));
		buttonFavourite.setOpaque(false);
		buttonFavourite.setContentAreaFilled(false);
		buttonFavourite.setBorderPainted(false);
		buttonFavourite.setBounds(759, 16, 41, 37);
		frame.getContentPane().add(buttonFavourite);

		// search bar
		barSearch = new JTextField();
		barSearch.setText("Search (City, Country)");
		barSearch.addActionListener(addlocation);
		barSearch.getDocument().addDocumentListener(addlocation);
		barSearch.setBounds(590, 16, 171, 37);
		barSearch.setOpaque(false);
		barSearch.setColumns(10);
		frame.getContentPane().add(barSearch);

		// / END INITIALIZATION OF LOCATIONS PANEL///

		// BEGIN INITIALIZATION OF SHORT-TERM FORECAST PANEL ///

		label12AM = new JLabel("12:00am");
		label12AM.setForeground(Color.LIGHT_GRAY);
		//label12AM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label12AM.setFont(font.deriveFont(15f));
		label12AM.setBounds(50, 360, 58, 15);
		frame.getContentPane().add(label12AM);

		label3AM = new JLabel("  3:00am");
		label3AM.setForeground(Color.LIGHT_GRAY);
		//label3AM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label3AM.setFont(font.deriveFont(15f));
		label3AM.setBounds(115, 360, 58, 15);
		frame.getContentPane().add(label3AM);

		label6AM = new JLabel("  6:00am");
		label6AM.setForeground(Color.LIGHT_GRAY);
		//label6AM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label6AM.setFont(font.deriveFont(15f));
		label6AM.setBounds(180, 360, 58, 15);
		frame.getContentPane().add(label6AM);

		label9AM = new JLabel("  9:00am");
		label9AM.setForeground(Color.LIGHT_GRAY);
		//label9AM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label9AM.setFont(font.deriveFont(15f));
		label9AM.setBounds(245, 360, 58, 15);
		frame.getContentPane().add(label9AM);

		label12PM = new JLabel("12:00pm");
		label12PM.setForeground(Color.LIGHT_GRAY);
		//label12PM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label12PM.setFont(font.deriveFont(15f));
		label12PM.setBounds(310, 360, 58, 15);
		frame.getContentPane().add(label12PM);

		label3PM = new JLabel("  3:00pm");
		label3PM.setForeground(Color.LIGHT_GRAY);
		//label3PM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label3PM.setFont(font.deriveFont(15f));
		label3PM.setBounds(375, 360, 58, 15);
		frame.getContentPane().add(label3PM);

		label6PM = new JLabel("  6:00pm");
		label6PM.setForeground(Color.LIGHT_GRAY);
		//label6PM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label6PM.setFont(font.deriveFont(15f));
		label6PM.setBounds(440, 360, 58, 15);
		frame.getContentPane().add(label6PM);

		label9PM = new JLabel("  9:00pm");
		label9PM.setForeground(Color.LIGHT_GRAY);
		//label9PM.setFont(new Font("Helvetica", Font.PLAIN, 15));
		label9PM.setFont(font.deriveFont(15f));
		label9PM.setBounds(505, 360, 58, 15);
		frame.getContentPane().add(label9PM);

		// / END INITIALIZATION OF SHORT-TERM FORECAST PANEL ///

		// / BEGIN INITIALIZATION OF LONG-TERM FORECAST PANEL ///

		labelMon = new JLabel("Mon.");
		labelMon.setForeground(Color.LIGHT_GRAY);
		//labelMon.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelMons.setFont(font.deriveFont(15f));
		labelMon.setBounds(100, 360, 58, 15);
		frame.getContentPane().add(labelMon);

		labelTues = new JLabel("Tues.");
		labelTues.setForeground(Color.LIGHT_GRAY);
		labelTues.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelTues.setBounds(165, 360, 58, 15);
		frame.getContentPane().add(labelTues);

		labelWed = new JLabel("Wed.");
		labelWed.setForeground(Color.LIGHT_GRAY);
		labelWed.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelWed.setBounds(230, 360, 58, 15);
		frame.getContentPane().add(labelWed);

		labelThurs = new JLabel("Thurs.");
		labelThurs.setForeground(Color.LIGHT_GRAY);
		labelThurs.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelThurs.setBounds(290, 360, 58, 15);
		frame.getContentPane().add(labelThurs);

		labelFri = new JLabel("Fri.");
		labelFri.setForeground(Color.LIGHT_GRAY);
		labelFri.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelFri.setBounds(365, 360, 58, 15);
		frame.getContentPane().add(labelFri);

		labelSat = new JLabel("Sat.");
		labelSat.setForeground(Color.LIGHT_GRAY);
		labelSat.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSat.setBounds(425, 360, 58, 15);
		frame.getContentPane().add(labelSat);

		labelSun = new JLabel("Sun.");
		labelSun.setForeground(Color.LIGHT_GRAY);
		labelSun.setFont(new Font("Helvetica", Font.PLAIN, 15));
		labelSun.setBounds(490, 360, 58, 15);
		frame.getContentPane().add(labelSun);

		// / END INITIALIZATION OF LONG-TERM CONDITIONS ///

		// testing code to prove that UserPreferences functions at least at a
		// basic level - TE
		/*
		 * try { UserPreferences prefs = new UserPreferences(); //prints c
		 * (default)
		 * System.out.println(prefs.isCelsius()?"Celsius":"Fahrenheit");
		 * prefs.setCelsius(false); //prints f
		 * System.out.println(prefs.isCelsius()?"Celsius":"Fahrenheit");
		 * UserPreferences.savePrefs(prefs);
		 * 
		 * //create a new preferences and load the old one UserPreferences
		 * new_prefs = UserPreferences.getPrefs(); //still f instead of default
		 * c because we saved & loaded it
		 * System.out.println(prefs.isCelsius()?"Celsius":"Fahrenheit"); }
		 * catch(Exception e) { e.printStackTrace(); }
		 */
		// call short term view
		shortTermView();
	}

	// font method
	private void createFont() {
		InputStream inputStream = this.getClass().getResourceAsStream(
				"HelveticaNeue-Medium.otf");
		try {
			font = Font.createFont(Font.TRUETYPE_FONT, inputStream);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// updates the labels current weather view to the new weather conditions
	public void refresh() {

		CurrentWeather new_weather = null;
		try {
			new_weather = new CurrentWeather("London,CA");
		} catch (UnsupportedEncodingException e) {
			System.out
					.println("Something went wrong retrieving current weather");
			e.printStackTrace();
		}

		// current location panel
		labelLocation.setText(new_weather.getCity() + ", "
				+ new_weather.getCountry());
		labelSkyConditionInfo.setText(new_weather.getSkyCondition());
		labelTempInfo.setText(new_weather.getTemp() + "°C");
		labelWindInfo.setText(new_weather.getWindSpeed() + " km/h "
				+ new_weather.getWindDirection());
		labelHumidityInfo.setText(new_weather.getHumidity() + "%");
		labelAirPressureInfo.setText(new_weather.getPressure() + "kPa");
		labelMaxTempInfo.setText(new_weather.getTempMax() + "°C");
		labelMinTempInfo.setText(new_weather.getTempMin() + "°C");
		labelSunriseInfo.setText(new_weather.getSunriseTime());
		labelSunsetInfo.setText(new_weather.getSunsetTime());

		// set background and weather icon
		if (new_weather.getSkyCondition().equalsIgnoreCase("sky is clear")) {
			backgroundLabel.setIcon(new ImageIcon(
					"src/main/resources/backgrounds/sunny_background.jpg"));
			labelSkyConditionIcon.setIcon(new ImageIcon(
					"src/main/resources/icons/sun_icon.png"));
		} else if (new_weather.getSkyCondition().equalsIgnoreCase("few clouds")) {
			backgroundLabel.setIcon(new ImageIcon(
					"src/main/resources/backgrounds/cloudy_background.jpg"));
			labelSkyConditionIcon.setIcon(new ImageIcon(
					"src/main/resources/icons/cloud_heavy_icon.png"));
		} else if (new_weather.getSkyCondition().equalsIgnoreCase("Rainy")) {
			backgroundLabel.setIcon(new ImageIcon(
					"src/main/resources/backgournds/rainy_background.jpg"));
			labelSkyConditionIcon.setIcon(new ImageIcon(
					"src/main/resources/icons/rain_heavy_icon.png"));
		}
	}

	// This listener is shared by the barSearch TextField and the AddLocation
	// Button.
	class AddLocation implements ActionListener, DocumentListener {
		private boolean alreadyEnabled = false;
		private JButton button;

		public AddLocation(JButton button) {
			this.button = button;
		}

		// Required by ActionListener.
		public void actionPerformed(ActionEvent e) {
			String name = barSearch.getText();

			// User didn't type in a unique name...
			if (name.equals("") || alreadyInList(name)) {
				Toolkit.getDefaultToolkit().beep();
				barSearch.requestFocusInWindow();
				barSearch.selectAll();
				return;
			}

			int index = listLocations.getSelectedIndex(); // get selected index
			if (index == -1) { // no selection, so insert at beginning
				index = 0;
			} else { // add after the selected item
				index++;
			}

			listModel.insertElementAt(barSearch.getText(), index);
			// If we just wanted to add to the end, we'd do this:
			// listModel.addElement(employeeName.getText());

			// Reset the text field.
			barSearch.requestFocusInWindow();
			barSearch.setText("");

			// Select the new item and make it visible.
			listLocations.setSelectedIndex(index);
			listLocations.ensureIndexIsVisible(index);
		}

		// This method tests for string equality. You could certainly
		// get more sophisticated about the algorithm. For example,
		// you might want to ignore white space and capitalization.
		protected boolean alreadyInList(String name) {
			return listModel.contains(name);
		}

		// Required by DocumentListener.
		public void insertUpdate(DocumentEvent e) {
			enableButton();
		}

		// Required by DocumentListener.
		public void removeUpdate(DocumentEvent e) {
			handleEmptyTextField(e);
		}

		// Required by DocumentListener.
		public void changedUpdate(DocumentEvent e) {
			if (!handleEmptyTextField(e)) {
				enableButton();
			}
		}

		private void enableButton() {
			if (!alreadyEnabled) {
				button.setEnabled(true);
			}
		}

		private boolean handleEmptyTextField(DocumentEvent e) {
			if (e.getDocument().getLength() <= 0) {
				button.setEnabled(false);
				alreadyEnabled = false;
				return true;
			}
			return false;
		}
	}

	// enable short term view
	public void shortTermView() {
		buttonLongTerm.setForeground(Color.DARK_GRAY);
		buttonShortTerm.setForeground(Color.WHITE);
		labelMon.setVisible(false);
		labelTues.setVisible(false);
		labelWed.setVisible(false);
		labelThurs.setVisible(false);
		labelFri.setVisible(false);
		labelSat.setVisible(false);
		labelSun.setVisible(false);
		label12AM.setVisible(true);
		label3AM.setVisible(true);
		label6AM.setVisible(true);
		label9AM.setVisible(true);
		label12PM.setVisible(true);
		label3PM.setVisible(true);
		label6PM.setVisible(true);
		label9PM.setVisible(true);
	}

	// enable long term view
	public void longTermView() {
		buttonLongTerm.setForeground(Color.WHITE);
		buttonShortTerm.setForeground(Color.DARK_GRAY);
		labelMon.setVisible(true);
		labelTues.setVisible(true);
		labelWed.setVisible(true);
		labelThurs.setVisible(true);
		labelFri.setVisible(true);
		labelSat.setVisible(true);
		labelSun.setVisible(true);
		label12AM.setVisible(false);
		label3AM.setVisible(false);
		label6AM.setVisible(false);
		label9AM.setVisible(false);
		label12PM.setVisible(false);
		label3PM.setVisible(false);
		label6PM.setVisible(false);
		label9PM.setVisible(false);
	}
}
